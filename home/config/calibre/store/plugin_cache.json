{
  "ebookshoppe_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + urllib2.quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n", 
  "ozon_ru": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport re\nimport urllib2\n\nfrom contextlib import closing\nfrom lxml import etree, html\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass OzonRUStore(BasicStoreConfig, StorePlugin):\n    shop_url = 'http://www.ozon.ru'\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        aff_id = '?partner=romuk'\n        # Use Kovid's affiliate id 30% of the time.\n        if random.randint(1, 10) in (1, 2, 3):\n            aff_id = '?partner=kovidgoyal'\n\n        url = self.shop_url + aff_id\n        detail_url = None\n        if detail_item:\n            # http://www.ozon.ru/context/detail/id/3037277/\n            detail_url = self.shop_url + '/context/detail/id/' + urllib2.quote(detail_item) + aff_id\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=15, timeout=60):\n        search_url = self.shop_url + '/webservice/webservice.asmx/SearchWebService?'\\\n                    'searchText=%s&searchContext=ebook' % urllib2.quote(query)\n        search_urls = [ search_url ]\n\n        xp_template = 'normalize-space(./*[local-name() = \"{0}\"]/text())'\n        counter = max_results\n        br = browser()\n\n        for url in search_urls:\n            with closing(br.open(url, timeout=timeout)) as f:\n                raw = xml_to_unicode(f.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n                doc = etree.fromstring(raw)\n                for data in doc.xpath('//*[local-name()=\"SearchItems\" or local-name()=\"ItemDetail\"]'):\n                    if counter <= 0:\n                        break\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.detail_item = data.xpath(xp_template.format('ID'))\n                    s.title = data.xpath(xp_template.format('Name'))\n                    s.author = data.xpath(xp_template.format('Author'))\n                    s.price = data.xpath(xp_template.format('Price'))\n                    s.cover_url = data.xpath(xp_template.format('Picture'))\n                    s.price = format_price_in_RUR(s.price)\n                    yield s\n\n    def get_details(self, search_result, timeout=60):\n        url = self.shop_url + '/context/detail/id/' + urllib2.quote(search_result.detail_item)\n        br = browser()\n\n        result = False\n        with closing(br.open(url, timeout=timeout)) as f:\n            raw = xml_to_unicode(f.read(), verbose=True)[0]\n            doc = html.fromstring(raw)\n\n            # example where we are going to find formats\n            # <div class=\"l\">\n            #     <p>\n            #         \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e:\n            #    </p>\n            # </div>\n            # <div class=\"l\">\n            #     <p>.epub, .fb2.zip, .pdf</p>\n            # </div>\n            xpt = u'normalize-space(//div[contains(@id, \"saleBlock\")]//*[contains(normalize-space(text()), \"\u0414\u043e\u0441\u0442\u0443\u043f\")]/ancestor-or-self::div[1]/following-sibling::div[1]/*[1])'\n            formats = doc.xpath(xpt)\n            if formats:\n                result = True\n                search_result.drm = SearchResult.DRM_UNLOCKED\n                search_result.formats = ', '.join(_parse_ebook_formats(formats))\n                # unfortunately no direct links to download books (only buy link)\n                # search_result.downloads['BF2'] = self.shop_url + '/order/digitalorder.aspx?id=' + + urllib2.quote(search_result.detail_item)\n\n            #<p class=\"main-cost\"><span class=\"main\">215</span><span class=\"submain\">00</span> \u0440\u0443\u0431.</p>\n            #<span itemprop=\"price\" class=\"hidden\">215.00</span>\n            #<meta itemprop=\"priceCurrency\" content=\"RUR \" />\n\n            # if the price not in the search result (the ID search case)\n            if not search_result.price:\n                price = doc.xpath(u'normalize-space(//*[@itemprop=\"price\"]/text())')\n                search_result.price = format_price_in_RUR(price)\n\n        return result\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 \u0440\u0443\u0431.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    if price and re.match(\"^\\d*?\\.\\d*?$\", price):\n        try:\n            price = u'{:,.2F} \u0440\u0443\u0431.'.format(float(price))\n            price = price.replace(',', ' ').replace('.', ',', 1)\n        except:\n            pass\n    return price\n\ndef _parse_ebook_formats(formatsStr):\n    '''\n    Creates a list with displayable names of the formats\n\n    :param formatsStr: string with comma separated book formats\n           as it provided by ozon.ru\n    :return: a list with displayable book formats\n    '''\n\n    formatsUnstruct = formatsStr.lower()\n    formats = []\n    if 'epub' in formatsUnstruct:\n        formats.append('ePub')\n    if 'pdf' in formatsUnstruct:\n        formats.append('PDF')\n    if 'fb2' in formatsUnstruct:\n        formats.append('FB2')\n    if 'rtf' in formatsUnstruct:\n        formats.append('RTF')\n    if 'txt' in formatsUnstruct:\n        formats.append('TXT')\n    if 'djvu' in formatsUnstruct:\n        formats.append('DjVu')\n    if 'doc' in formatsUnstruct:\n        formats.append('DOC')\n    return formats\n"
}